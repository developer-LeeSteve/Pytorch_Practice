import torch
import numpy as np

a = torch.empty(1)
b = torch.empty(3)
c = torch.empty(2, 2)
d = torch.rand(2,2)
e = torch.ones(1, 1)
f = torch.zeros(1, 1)
g = torch.ones(1,1, dtype=torch.int)
h = torch.ones(1,1, dtype=torch.double)
i = torch.ones(1,1, dtype=torch.float16)
j = torch.ones(2,2)
k = torch.tensor([2.5, 0.1])
l = torch.rand(2,2)
m = torch.rand(2,2)
n = torch.rand(2,2)
n = n.add_(m)
o = torch.sub(l,m)
p = torch.mul(l,m)
q = torch.div(l,m)
r = torch.rand(5, 3)
s = torch.rand(4, 4)
t = s.view(16)
u = s.view(-1, 8)
v = torch.ones(5)
w = v.numpy()
aa = torch.ones(5, requires_grad=True)

print(a)
print(b)
print(c)
print(d)
print(e)
print(f)
print(f.dtype)
print(g.dtype)
print(h.dtype)
print(i.dtype)
print(j.size())
print(k)
print(l)
print(m)
print(l+m)
print(torch.add(l,m))
print(n)
print(o)
print(p)
print(q)
print(r)
print(r[:, 0])
print(r[1, :])
print(r[1,1].item())
print(s)
print(t)
print(u)
print(v)
print(type(v))
print(aa)

if torch.cuda.is_available():
	device = torch.device('cuda')
	x = torch.ones(5, device=device)
	y = torch.ones(5)
	y = y.to(device)
	z = x + y
	try:
		z.numpy()
		print(z)
	except:
		z = z.to('cpu')
		print("is cpu")
		z.numpy()
		print(z)
else:
	print("not available")